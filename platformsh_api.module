<?php
/**
 * @file
 * Platform.sh API module.
 */

/**
 * Implements hook_entity_info().
 */
function platformsh_api_entity_info() {
  $items = array();
  $items['platformsh_api_resource'] = array(
    'label' => t('Platform.sh Resource'),
    'controller class' => 'PlatformshApiResourceController',
    'entity class' => 'PlatformshApiResource',
    'base table' => 'platformsh_api_resource',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'resource_id',
      'label' => 'external_id',
      'bundle' => 'type',
    ),
    'module' => 'platformsh_api',
    'access callback' => 'platformsh_api_resource_access',
    'metadata controller class' => 'PlatformshApiResourceMetadataController',
    'views controller class' => 'EntityDefaultViewsController',
    'bundles' => array(
      'subscription' => array(
        'label' => t('Subscription'),
      ),
    ),
  );

  return $items;
}

/**
 * Entity access callback for a resource.
 */
function platformsh_api_resource_access($op, PlatformshApiResource $resource = NULL, $account = NULL) {
  return user_access('administer platform.sh integration', $account);
}

/**
 * Implements hook_menu().
 */
function platformsh_api_menu() {
  $items = array();
  $items['admin/config/services/platform-sh'] = array(
    'title' => 'Platform.sh',
    'description' => 'Administer Platform.sh API integration.',
    'access arguments' => array('administer platform.sh integration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('platformsh_api_config_form'),
    'file' => 'includes/platformsh_api.pages.inc',
  );
  $items['admin/structure/platform-sh/subscriptions'] = array(
    'title' => 'Platform.sh subscriptions',
    'description' => 'List Platform.sh subscriptions.',
    'access callback' => 'platformsh_api_resource_access',
    'access arguments' => array('view'),
    'page callback' => 'platformsh_api_list_subscriptions',
    'file' => 'includes/platformsh_api.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function platformsh_api_permission() {
  return array(
    'administer platform.sh integration' => array(
      'title' => t('Administer Platform.sh integration'),
    ),
  );
}

/**
 * Form to refresh subscriptions.
 */
function platformsh_api_refresh_subscriptions_form($form, &$form_state) {
  $form['refresh'] = array(
    '#type' => 'submit',
    '#value' => t('Refresh subscriptions'),
  );
  return $form;
}

/**
 * Refresh subscriptions form - submit callback.
 */
function platformsh_api_refresh_subscriptions_form_submit(&$form, &$form_state) {
  platformsh_api_refresh_subscriptions();
}

/**
 * Get a client object.
 *
 * @param string $api_token
 *   An API token. Defaults to the token set in the variable
 *   'platformsh_api_token'.
 *
 * @return \Platformsh\Client\PlatformClient
 *   A Platform.sh API client object.
 */
function platformsh_api_client($api_token = NULL) {
  static $client;
  if (!isset($client) || isset($api_token)) {
    $connector = new \Platformsh\Client\Connection\Connector(array(
      'api_token' => variable_get('platformsh_api_token', $api_token),
    ));

    $client = new \Platformsh\Client\PlatformClient($connector);
  }

  return $client;
}

/**
 * Handle an exception from a bad API response.
 *
 * @param Exception $e
 *   The Guzzle response exception.
 */
function platformsh_api_handle_exception(Exception $e) {
  $settings_url = url('admin/config/services/platform-sh');
  $params = array(
    '@settings' => $settings_url,
  );

  if ($e instanceof \GuzzleHttp\Exception\BadResponseException) {
    $response = $e->getResponse();
    if ($response && $response->getStatusCode() === 401) {
      drupal_set_message(
        t('Unauthorized. Your Platform.sh <a href="@settings">API token</a> is probably invalid.', $params),
        'error'
      );
      return;
    }
  }
  elseif ($e instanceof RuntimeException && $e->getMessage() === 'Not logged in') {
    drupal_set_message(
      t('You need to set your Platform.sh <a href="@settings">API token</a>.', $params),
      'error'
    );
    return;
  }

  throw $e;
}

/**
 * Validate an API token.
 *
 * @param string $api_token
 *   The API token to validate.
 *
 * @return bool
 *   TRUE if the API token is valid, FALSE otherwise.
 */
function platformsh_api_validate_token($api_token) {
  if (empty($api_token)) {
    throw new \InvalidArgumentException('Empty API token');
  }

  $client = platformsh_api_client($api_token);
  try {
    $client->getAccountInfo();
  }
  catch (\GuzzleHttp\Exception\BadResponseException $e) {
    if ($e->getResponse() && $e->getResponse()->getStatusCode() === 401) {
      return FALSE;
    }
    throw $e;
  }

  return TRUE;
}

/**
 * Refresh the internally saved subscriptions.
 */
function platformsh_api_refresh_subscriptions() {
  $client = platformsh_api_client();
  try {
    $subscriptions = $client->getSubscriptions();
  }
  catch (Exception $e) {
    platformsh_api_handle_exception($e);
    $subscriptions = array();
  }

  foreach ($subscriptions as $subscription) {
    platformsh_api_save_resource($subscription, 'subscription');
  }
}

/**
 * Save a resource as an internal entity.
 *
 * @param \Platformsh\Client\Model\Resource $source
 *   The resource object from the API client.
 * @param string                            $type
 *   The resource type.
 * @param object                            $account
 *   The Drupal user account object to associate with the resource
 *   (optional).
 *
 * @return bool
 *   TRUE on success, FALSE otherwise.
 */
function platformsh_api_save_resource(\Platformsh\Client\Model\Resource $source, $type, $account = NULL) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'platformsh_api_resource');
  $query->propertyCondition('external_id', $source->getProperty('id'));
  $result = $query->execute();

  // Updating an existing resource.
  if (!empty($result['platformsh_api_resource'])) {
    $resource = entity_load_single('platformsh_api_resource', key($result['platformsh_api_resource']));

    $resource->uid = $account ? $account->uid : NULL;
    $resource->url = $source->getUri();
    $resource->data = $source->getData();
    $resource->refreshed = REQUEST_TIME;
  }
  else {
    // Saving a new resource.
    $values = array(
      'uid' => $account ? $account->uid : NULL,
      'external_id' => $source->id,
      'type' => $type,
      'url' => $source->getUri(),
      'data' => $source->getData(),
    );
    $resource = entity_create('platformsh_api_resource', $values);
  }

  return $resource->save();
}

/**
 * Implements hook_views_api().
 */
function platformsh_api_views_api() {
  return array('api' => 3);
}

/**
 * @param \PlatformshApiResource $subscription
 *
 * @return string
 */
function platformsh_api_subscription_project_link_getter(PlatformshApiResource $subscription) {
  $data = $subscription->data;
  if (empty($data['project_ui'])) {
    return NULL;
  }

  $title = empty($data['project_title']) ? $data['project_id'] : $data['project_title'];
  return l($title, $data['project_ui']);
}

/**
 * @param \PlatformshApiResource $resource
 *
 * @return \Platformsh\Client\Model\Resource
 */
function platformsh_api_subscription_source_object(PlatformshApiResource $resource) {
  $client = platformsh_api_client();
  $className = '\\Platformsh\\Client\\Model\\' . $resource->type;
  return $className::wrap(
    $resource->data,
    $resource->url,
    $client->getConnector()->getClient()
  );
}

/**
 * @param \PlatformshApiResource $resource
 *
 * @return string
 */
function platformsh_api_subscription_usage_getter(PlatformshApiResource $resource) {
  /** @var \Platformsh\Client\Model\Subscription $subscription */
  $subscription = platformsh_api_subscription_source_object($resource);

  $items = array();
  $items['plan'] = t('Plan: @value', array('@value' => $subscription->plan));
  $items['storage'] = t('Storage: @value GiB', array('@value' => $subscription->storage / 1024));
  $items['environments'] = t('Environments: @value', array('@value' => $subscription->environments));
  $items['users'] = t('User licenses: @value', array('@value' => $subscription->user_licenses));

  $list = array(
    '#theme' => 'item_list',
    '#items' => $items,
  );

  return drupal_render($list);
}
